{"version":3,"file":"component---src-pages-video-with-popups-js-5be26a8f87f82631242b.js","mappings":"2HAwEA,UArEwBA,IAAoC,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,IAAlC,SAAEC,EAAQ,OAAEC,EAAM,QAAEC,GAASR,EACpD,MAAM,EAACS,EAAkB,EAACC,IAAwBC,EAAAA,EAAAA,UAAS,IACrD,EAACC,EAAe,EAACC,IAAqBF,EAAAA,EAAAA,WAAS,GAgCrD,OA9BAG,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAQC,SAASC,eAAeT,GAEhCU,EAAmBA,KACnBT,EAAoBF,EAAOY,QAAUJ,EAAMK,aAAeb,EAAOE,GAAmBY,OACtFR,GAAkB,GAClBE,EAAMO,QAENC,YAAW,KACTV,GAAkB,GAClBE,EAAMS,OACNd,GAAqBe,GAAaA,EAAY,GAAE,GAC/C,MACL,EAGIC,EAAmBA,KACvBhB,EAAqB,GACrBG,GAAkB,EAAM,EAM1B,OAHAE,EAAMY,iBAAiB,aAAcT,GACrCH,EAAMY,iBAAiB,QAASD,GAEzB,KACLX,EAAMa,oBAAoB,aAAcV,GACxCH,EAAMa,oBAAoB,QAASF,EAAiB,CACrD,GACA,CAACjB,EAAmBF,EAAQC,IAG7BqB,EAAAA,cAAA,OAAKC,UAAU,mBACbD,EAAAA,cAAA,SAAOE,GAAIvB,EAASwB,MAAM,MAAMC,UAAQ,EAACC,MAAI,GAC3CL,EAAAA,cAAA,UAAQM,IAAK7B,EAAU8B,KAAK,cAAc,gDAI3CxB,GACCiB,EAAAA,cAAA,OACEC,UAAY,UAAQlB,EAAiB,OAAS,IAC9CyB,MAAO,CACLC,KAA8B,QAAzBrC,EAAAM,EAAOE,UAAkB,IAAAR,OAAA,EAAzBA,EAA2BqC,MAAO,OACvCC,QAAiC,QAAzBrC,EAAAK,EAAOE,UAAkB,IAAAP,OAAA,EAAzBA,EAA2BqC,SAAU,OAC7CC,MAA+B,QAAzBrC,EAAAI,EAAOE,UAAkB,IAAAN,OAAA,EAAzBA,EAA2BqC,OAAQ,MACzCC,OAAgC,QAAzBrC,EAAAG,EAAOE,UAAkB,IAAAL,OAAA,EAAzBA,EAA2BqC,QAAS,OAC3CC,WAAoC,QAAzBrC,EAAAE,EAAOE,UAAkB,IAAAJ,OAAA,EAAzBA,EAA2BqC,YAAa,qBAGpDjC,EAAoBF,EAAOY,QAC1BU,EAAAA,cAAAA,EAAAA,SAAA,KACGtB,EAAOE,GAAmBkC,MACzBd,EAAAA,cAAA,OAAKC,UAAU,QAAQc,KAAK,MAAM,aAAW,SAASrC,EAAOE,GAAmBkC,OAEhFd,EAAAA,cAAA,OAAKM,IAAK5B,EAAOE,GAAmBoC,OAAQC,IAAI,QAAQf,GAAG,eAE7DF,EAAAA,cAAA,OAAKE,GAAG,cAAcxB,EAAOE,GAAmBsC,OAChDlB,EAAAA,cAAA,OAAKE,GAAG,aAAaxB,EAAOE,GAAmBuC,WAKnD,C","sources":["webpack://uxpages/./src/pages/VideoWithPopups.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './VideoWithPopups.css';\n\nconst VideoWithPopups = ({ videoSrc, popups, videoId }) => {\n  const [currentPopupIndex, setCurrentPopupIndex] = useState(0);\n  const [isPopupVisible, setIsPopupVisible] = useState(false);\n\n  useEffect(() => {\n    const video = document.getElementById(videoId);\n\n    const handleTimeUpdate = () => {\n      if (currentPopupIndex < popups.length && video.currentTime >= popups[currentPopupIndex].time) {\n        setIsPopupVisible(true);\n        video.pause();\n\n        setTimeout(() => {\n          setIsPopupVisible(false);\n          video.play();\n          setCurrentPopupIndex(prevIndex => prevIndex + 1);\n        }, 5500); // Show popup for 4 seconds\n      }\n    };\n\n    const handleVideoEnded = () => {\n      setCurrentPopupIndex(0); // Reset popup index\n      setIsPopupVisible(false); // Hide popup when the video loops\n    };\n\n    video.addEventListener('timeupdate', handleTimeUpdate);\n    video.addEventListener('ended', handleVideoEnded);\n\n    return () => {\n      video.removeEventListener('timeupdate', handleTimeUpdate);\n      video.removeEventListener('ended', handleVideoEnded);\n    };\n  }, [currentPopupIndex, popups, videoId]);\n\n  return (\n    <div className=\"video-container\">\n      <video id={videoId} width=\"800\" controls loop>\n        <source src={videoSrc} type=\"video/mp4\" />\n        Your browser does not support the video tag.\n      </video>\n\n      {isPopupVisible && (\n        <div\n          className={`popup ${isPopupVisible ? 'show' : ''}`}\n          style={{\n            top: popups[currentPopupIndex]?.top || 'auto',\n            bottom: popups[currentPopupIndex]?.bottom || 'auto',\n            left: popups[currentPopupIndex]?.left || '50%',\n            right: popups[currentPopupIndex]?.right || 'auto',\n            transform: popups[currentPopupIndex]?.transform || 'translateX(-50%)',\n          }}\n        >\n          {currentPopupIndex < popups.length && (\n            <>\n              {popups[currentPopupIndex].emoji ? (\n                <div className=\"emoji\" role=\"img\" aria-label=\"emoji\">{popups[currentPopupIndex].emoji}</div>\n              ) : (\n                <img src={popups[currentPopupIndex].imgSrc} alt=\"Popup\" id=\"popupImage\" />\n              )}\n              <div id=\"popupTitle\">{popups[currentPopupIndex].title}</div>\n              <div id=\"popupText\">{popups[currentPopupIndex].message}</div>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default VideoWithPopups;\n"],"names":["_ref","_popups$currentPopupI","_popups$currentPopupI2","_popups$currentPopupI3","_popups$currentPopupI4","_popups$currentPopupI5","videoSrc","popups","videoId","currentPopupIndex","setCurrentPopupIndex","useState","isPopupVisible","setIsPopupVisible","useEffect","video","document","getElementById","handleTimeUpdate","length","currentTime","time","pause","setTimeout","play","prevIndex","handleVideoEnded","addEventListener","removeEventListener","React","className","id","width","controls","loop","src","type","style","top","bottom","left","right","transform","emoji","role","imgSrc","alt","title","message"],"sourceRoot":""}